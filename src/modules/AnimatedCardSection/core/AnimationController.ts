'use client';

import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { createElementTimeline } from '@/lib/gsap/hooks/useElementTimeline';
import { initCardDeckScroll } from '../utils/cardDeckAnimation';
import { gsapInitializer, isGSAPReady } from '@/lib/gsap/core/GSAPInitializer';

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ GSAPInitializer

// –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∏–ø—ã window –¥–ª—è ScrollTrigger
declare global {
  interface Window {
    ScrollTrigger: typeof ScrollTrigger;
  }
}

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π helper: –æ—á–∏—â–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–µ–∫—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≤–µ—Ä—Å–µ/–æ—á–∏—Å—Ç–∫–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
 */
const clearElementAnimations = (wrapper: HTMLElement): void => {
  const elements = wrapper.querySelectorAll<HTMLElement>('[data-animation]');
  elements.forEach((el) => {
    gsap.killTweensOf(el);
    gsap.set(el, { clearProps: 'all' });
  });
};

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ —Å–µ–∫—Ü–∏–π
 */
interface SectionController {
  timeline: Omit<gsap.core.Timeline, 'then'>;
  wrapper: HTMLElement;
  isActive: boolean;
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–π –∫–∞—Ä—Ç–æ—á–µ–∫
 * –ó–∞–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π ElementTimelineRegistry —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
 */
export class AnimationController {
  private sections = new Map<number, SectionController>();
  private masterTimeline: gsap.core.Timeline | null = null;
  private activeCardIndex = 0;
  private isInitialized = false;
  private fallbackActive = false;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä-–∞–Ω–∏–º–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Hero —Å–µ–∫—Ü–∏–∏)
   */
  async initializeMaster(): Promise<gsap.core.Timeline | null> {
    if (this.isInitialized) return this.masterTimeline;

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GSAP —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const initResult = await gsapInitializer.initialize({
        timeout: 15000,
        retryAttempts: 3,
        enableFallback: true
      });

      if (initResult.fallbackActive || !initResult.gsapAvailable) {
        console.warn('üîÑ GSAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS fallback –∞–Ω–∏–º–∞—Ü–∏–∏');
        this.fallbackActive = true;
        this.activateFallbackMode();
        this.isInitialized = true;
        return null;
      }

      const scrollSection = document.querySelector('.scroll-section');
      if (!scrollSection) return null;

      const wrapperElement = (scrollSection.querySelector('.portfolio__wrapper') ||
        scrollSection) as HTMLElement;
      const items = Array.from(wrapperElement.querySelectorAll('li')) as HTMLElement[];

      if (items.length === 0) return null;

      // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Ç–µ—Ä timeline –¥–ª—è –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
      this.masterTimeline = initCardDeckScroll(wrapperElement, items, (cardIndex) => {
        this.activateCard(cardIndex);
      });

      this.isInitialized = true;
      return this.masterTimeline;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ master timeline, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
      this.fallbackActive = true;
      this.activateFallbackMode();
      this.isInitialized = true;
      return null;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º timeline
   */
  async registerSection(sectionIndex: number, wrapper: HTMLElement): Promise<gsap.core.Timeline | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–∫—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
    if (this.sections.has(sectionIndex)) {
      return this.sections.get(sectionIndex)!.timeline;
    }

    try {
      if (this.fallbackActive) {
        return this.registerSectionFallback(sectionIndex, wrapper);
      }

      return await this.registerSectionWithGSAP(sectionIndex, wrapper);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ü–∏–∏ ${sectionIndex}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:`, error);
      this.activateFallbackForSection(wrapper);
      return this.createFallbackController(sectionIndex, wrapper);
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –≤ fallback —Ä–µ–∂–∏–º–µ
   */
  private registerSectionFallback(sectionIndex: number, wrapper: HTMLElement): null {
    console.log(`üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ ${sectionIndex} –≤ fallback —Ä–µ–∂–∏–º–µ`);
    this.activateFallbackForSection(wrapper);
    
    const controller: SectionController = {
      timeline: gsap.timeline() as Omit<gsap.core.Timeline, 'then'>, // –ü—É—Å—Ç–æ–π timeline –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      wrapper,
      isActive: sectionIndex === 0,
    };
    
    this.sections.set(sectionIndex, controller);
    return null;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ —Å GSAP –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
   */
  private async registerSectionWithGSAP(sectionIndex: number, wrapper: HTMLElement): Promise<gsap.core.Timeline | null> {
    const elementTimeline = await createElementTimeline(wrapper, '[data-animation]');

    if (!elementTimeline) {
      console.warn(`Fallback –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏ ${sectionIndex}`);
      this.activateFallbackForSection(wrapper);
      return this.createFallbackController(sectionIndex, wrapper);
    }

    this.setupTimelineCallbacks(elementTimeline, wrapper);
    this.createAndStoreSectionController(sectionIndex, wrapper, elementTimeline);
    
    // –ï—Å–ª–∏ —ç—Ç–æ Hero —Å–µ–∫—Ü–∏—è, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    if (sectionIndex === 0) {
      this.activateCard(0);
    }

    return elementTimeline;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ fallback –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
   */
  private createFallbackController(sectionIndex: number, wrapper: HTMLElement): null {
    const controller: SectionController = {
      timeline: gsap.timeline() as Omit<gsap.core.Timeline, 'then'>,
      wrapper,
      isActive: sectionIndex === 0,
    };
    
    this.sections.set(sectionIndex, controller);
    return null;
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è timeline
   */
  private setupTimelineCallbacks(timeline: Omit<gsap.core.Timeline, 'then'>, wrapper: HTMLElement): void {
    timeline.eventCallback('onReverseComplete', () => {
      clearElementAnimations(wrapper);
    });
  }

  /**
/**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å–µ–∫—Ü–∏–∏
   */
  private createAndStoreSectionController(
    sectionIndex: number,
    wrapper: HTMLElement,
    timeline: Omit<gsap.core.Timeline, 'then'>,
  ): void {
    const controller: SectionController = {
      timeline,
      wrapper,
      isActive: sectionIndex === 0, // Hero –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    };

    this.sections.set(sectionIndex, controller);
  }

  /**
   * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º timeline
   */
  private activateCard(cardIndex: number): void {
    if (this.fallbackActive) {
      this.activateFallbackCard(cardIndex);
      return;
    }

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const prevController = this.sections.get(this.activeCardIndex);
    if (prevController && prevController.isActive) {
      prevController.timeline.reverse();
      prevController.isActive = false;
    }

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    const currentController = this.sections.get(cardIndex);
    if (currentController && !currentController.isActive) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ text-reveal —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
      const hasTextReveal = currentController.wrapper.querySelector(
        '[data-animation="text-reveal"]',
      );

      if (hasTextReveal) {
        // –î–ª—è text-reveal –∞–Ω–∏–º–∞—Ü–∏–π –¥–µ–ª–∞–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        currentController.timeline.progress(0);
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å —Ä–µ–≤–µ—Ä—Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gsap.delayedCall(0.1, () => {
          if (currentController.isActive) {
            currentController.timeline.play();
          }
        });
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        currentController.timeline.progress(0).play();
      }

      currentController.isActive = true;
    }

    this.activeCardIndex = cardIndex;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
   */
  getActiveCardIndex(): number {
    return this.activeCardIndex;
  }

  /**
   * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
   */
  navigateToCard(cardIndex: number): void {
    if (!this.isInitialized) {
      console.warn('AnimationController not initialized');
      return;
    }

    if (!this.sections.has(cardIndex)) {
      console.warn(`Card with index ${cardIndex} not found`);
      return;
    }

    if (this.fallbackActive || !isGSAPReady() || !this.masterTimeline) {
      this.activateCard(cardIndex);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º ScrollTrigger –∏–∑ –º–∞—Å—Ç–µ—Ä timeline
    const scrollTrigger = this.masterTimeline.scrollTrigger;
    if (!scrollTrigger) {
      console.warn('ScrollTrigger not found in master timeline');
      return;
    }

    // –î–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å–µ–∫—Ü–∏–∏
    if (cardIndex === 0) {
      gsap.to(window, {
        duration: 1,
        scrollTo: {
          y: scrollTrigger.start,
          autoKill: false,
        },
        ease: 'power2.inOut',
      });
      return;
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    const progress = cardIndex / Math.max(1, this.sections.size - 1);

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ end - —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const startPos = scrollTrigger.start;
    // end –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ start + –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç viewport height
    const viewportHeight = window.innerHeight;
    const totalScrollDistance = (this.sections.size - 1) * viewportHeight;
    const targetPosition = startPos + totalScrollDistance * progress;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º gsap.to –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ–∑–∏—Ü–∏–∏
    gsap.to(window, {
      duration: 1,
      scrollTo: {
        y: targetPosition,
        autoKill: false,
      },
      ease: 'power2.inOut',
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID —Å–µ–∫—Ü–∏–∏
   */
  getCardIndexBySectionId(sectionId: string): number {
    // –ú–∞–ø–ø–∏–Ω–≥ ID —Å–µ–∫—Ü–∏–π –∫ –∏–Ω–¥–µ–∫—Å–∞–º –∫–∞—Ä—Ç–æ—á–µ–∫
    const sectionMapping: Record<string, number> = {
      'hero-section': 0,
      'about-section': 1,
      'skills-section': 2,
      'projects-section': 3,
      'gallery-section': 4,
    };

    return sectionMapping[sectionId] ?? -1;
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
   */
  cleanup(): void {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    this.sections.forEach((controller) => {
      controller.timeline.kill();
      clearElementAnimations(controller.wrapper);
    });

    // –û—á–∏—â–∞–µ–º –º–∞—Å—Ç–µ—Ä timeline
    this.masterTimeline?.kill();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.sections.clear();
    this.masterTimeline = null;
    this.activeCardIndex = 0;
    this.isInitialized = false;
  }

  /**
   * –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ–∫—Ü–∏–∏ (–¥–ª—è —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤)
   */
  cleanupSection(sectionIndex: number): void {
    const controller = this.sections.get(sectionIndex);
    if (controller) {
      controller.timeline.kill();
      clearElementAnimations(controller.wrapper);
      this.sections.delete(sectionIndex);
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç fallback —Ä–µ–∂–∏–º –¥–ª—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
   */
  private activateFallbackMode(): void {
    document.documentElement.classList.add('gsap-fallback');
    console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω fallback —Ä–µ–∂–∏–º –∞–Ω–∏–º–∞—Ü–∏–π');
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç fallback –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏
   */
  private activateFallbackForSection(wrapper: HTMLElement): void {
    wrapper.classList.add('fallback-animations');
    const elements = wrapper.querySelectorAll('[data-animation]');
    elements.forEach(el => {
      el.classList.add('animate-fallback');
    });
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≤ fallback —Ä–µ–∂–∏–º–µ
   */
  private activateFallbackCard(cardIndex: number): void {
    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    this.sections.forEach((controller, index) => {
      if (controller.isActive && index !== cardIndex) {
        controller.wrapper.classList.remove('active');
        controller.isActive = false;
      }
    });

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—É—é —Å–µ–∫—Ü–∏—é
    const targetController = this.sections.get(cardIndex);
    if (targetController && !targetController.isActive) {
      targetController.wrapper.classList.add('active');
      targetController.isActive = true;
      this.activeCardIndex = cardIndex;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  isReady(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback —Ä–µ–∂–∏–º–∞
   */
  isFallbackActive(): boolean {
    return this.fallbackActive;
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  play(): void {
    if (this.fallbackActive) {
      this.triggerFallbackAnimations();
      return;
    }

    if (this.masterTimeline) {
      this.masterTimeline.play();
    }
  }

  /**
   * –ü–∞—É–∑–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  pause(): void {
    if (this.fallbackActive) {
      return; // CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–∞—É–∑—É
    }

    if (this.masterTimeline) {
      this.masterTimeline.pause();
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  restart(): void {
    if (this.fallbackActive) {
      this.resetFallbackAnimations();
      setTimeout(() => this.triggerFallbackAnimations(), 50);
      return;
    }

    if (this.masterTimeline) {
      this.masterTimeline.restart();
    }
  }

  /**
   * –†–µ–≤–µ—Ä—Å –∞–Ω–∏–º–∞—Ü–∏–∏
   */
  reverse(): void {
    if (this.fallbackActive) {
      this.resetFallbackAnimations();
      return;
    }

    if (this.masterTimeline) {
      this.masterTimeline.reverse();
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ScrollTrigger
   */
  setupScrollTrigger(config: ScrollTrigger.Vars): void {
    if (this.fallbackActive || !isGSAPReady()) {
      console.warn('ScrollTrigger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ fallback —Ä–µ–∂–∏–º–µ');
      return;
    }

    if (this.masterTimeline && window.ScrollTrigger) {
      window.ScrollTrigger.create({
        ...config,
        animation: this.masterTimeline
      });
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ fallback –∞–Ω–∏–º–∞—Ü–∏–π
   */
  private triggerFallbackAnimations(): void {
    this.sections.forEach((controller) => {
      if (controller.isActive) {
        const elements = controller.wrapper.querySelectorAll('[data-animation]');
        elements.forEach((el, index) => {
          setTimeout(() => {
            el.classList.add('animate-fallback');
          }, index * 100);
        });
      }
    });
  }

  /**
   * –°–±—Ä–æ—Å fallback –∞–Ω–∏–º–∞—Ü–∏–π
   */
  private resetFallbackAnimations(): void {
    this.sections.forEach((controller) => {
      const elements = controller.wrapper.querySelectorAll('[data-animation]');
      elements.forEach(el => {
        el.classList.remove('animate-fallback');
      });
    });
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
   */
  destroy(): void {
    if (this.fallbackActive) {
      this.resetFallbackAnimations();
      document.documentElement.classList.remove('gsap-fallback');
    } else {
      if (this.masterTimeline) {
        this.masterTimeline.kill();
      }

      this.sections.forEach((controller) => {
        controller.timeline.kill();
        clearElementAnimations(controller.wrapper);
      });

      if (window.ScrollTrigger) {
        window.ScrollTrigger.getAll().forEach(trigger => trigger.kill());
      }
    }

    this.sections.clear();
    this.masterTimeline = null;
    this.isInitialized = false;
    this.fallbackActive = false;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
export const animationController = new AnimationController();
