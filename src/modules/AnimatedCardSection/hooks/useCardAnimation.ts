'use client';

import { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';
import { ScrollSmoother } from 'gsap/ScrollSmoother';
import { AnimationProps } from '@/lib/gsap/types/gsap.types';
import { createElementTimeline } from '@/lib/gsap/hooks/useGsap';
gsap.registerPlugin(ScrollTrigger);

/**
 * –•—É–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–æ–¥–µ –∫–∞—Ä—Ç
 * Hero-—Å–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—á–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –Ω–∞ –Ω–µ—ë
 * –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ SkillsSection (index 2)
 */
export const useCardAnimation = (
  props: AnimationProps & {
    sectionIndex?: number | null;
    onDirectionChange?: (direction: 'horizontal' | 'vertical') => void;
  },
) => {
  const { direction = 'vertical', sectionIndex } = props;
  const wrapperRef = useRef<HTMLLIElement>(null);
  const timelineRef = useRef<gsap.core.Timeline | null>(null);
  const elementTimelineRef = useRef<gsap.core.Timeline | null>(null);

  useEffect(() => {
    console.log(`üöÄ useCardAnimation hook initialized for section ${sectionIndex}`);

    const wrapper = wrapperRef.current;
    if (!wrapper || sectionIndex === null || sectionIndex === undefined) {
      console.warn(`‚ùå Section with index ${sectionIndex} not found or invalid`);
      return;
    }

    console.log(`‚úÖ Found wrapper for section ${sectionIndex}:`, {
      wrapper: wrapper.id || wrapper.className,
      rect: wrapper.getBoundingClientRect(),
      children: wrapper.children.length,
      elementsWithAnimation: wrapper.querySelectorAll('[data-animation]').length,
    });

    let observer: MutationObserver | null = null;
    let cleared = false;
    
    const initAnimation = () => {
      const smoother = ScrollSmoother.get();
      if (!smoother) return false;
      
      if (sectionIndex === 0) {
        // Hero section - —Å—Ç–∞—Ç–∏—á–Ω–∞, —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π timeline –¥–ª—è –≤—Å–µ–π –∫–æ–ª–æ–¥—ã
        const scrollSection = document.querySelector('.scroll-section');
        if (!scrollSection) return false;
        
        const wrapperElement = scrollSection.querySelector('.portfolio__wrapper') || scrollSection;
        const items = Array.from(wrapperElement.querySelectorAll('li')) as HTMLElement[];
        
        if (items.length === 0) return false;
        
        // –°–æ–∑–¥–∞–µ–º timeline –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∞–Ω–∏–º–∞—Ü–∏–π Hero
        elementTimelineRef.current = createElementTimeline(wrapper as HTMLElement, '[data-animate], [data-animation]');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ Hero —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        elementTimelineRef.current?.play();
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π timeline –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
        const timeline = initCardDeckScroll(wrapperElement, items);
        timelineRef.current = timeline;
        return true;
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ - –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –ø–æ —Å–∫—Ä–æ–ª–ª—É
        elementTimelineRef.current = createElementTimeline(wrapper as HTMLElement, '[data-animate], [data-animation]');
        
        // –°–æ–∑–¥–∞–µ–º ScrollTrigger –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ —Å–∫—Ä–æ–ª–ª—É
        ScrollTrigger.create({
          trigger: wrapper,
          start: sectionIndex === 1 ? 'top 30%' : sectionIndex === 2 ? 'top 40%' : 'top 20%',
          end: 'bottom 80%',
          scroller: '#smooth-wrapper',
          onEnter: () => {
            console.log(`üéØ ScrollTrigger onEnter - Section ${sectionIndex}`);
            elementTimelineRef.current?.play();
          },
          onEnterBack: () => {
            console.log(`üîÑ ScrollTrigger onEnterBack - Section ${sectionIndex}`);
            elementTimelineRef.current?.play();
          },
          onLeave: () => {
            console.log(`‚¨ÜÔ∏è ScrollTrigger onLeave - Section ${sectionIndex}`);
            elementTimelineRef.current?.reverse();
          },
          onLeaveBack: () => {
            console.log(`‚¨áÔ∏è ScrollTrigger onLeaveBack - Section ${sectionIndex}`);
            elementTimelineRef.current?.progress(0).pause();
            const elements = wrapper.querySelectorAll('[data-animate], [data-animation]');
            elements?.forEach((element) => {
              gsap.set(element, { clearProps: 'all' });
            });
          },
          markers: true,
        });
        return true;
      }
    };

    if (!initAnimation()) {
      observer = new MutationObserver(() => {
        if (cleared) return;
        if (initAnimation()) {
          observer?.disconnect();
        }
      });
      observer.observe(document.body, { childList: true, subtree: true });
    }

    return () => {
      cleared = true;
      observer?.disconnect();
      
      // –û—á–∏—Å—Ç–∫–∞ –¥–ª—è Hero-—Å–µ–∫—Ü–∏–∏
      if (sectionIndex === 0 && timelineRef.current) {
        timelineRef.current.scrollTrigger?.kill();
        timelineRef.current.kill();
        timelineRef.current = null;
      }
      
      // –û—á–∏—Å—Ç–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
      if (sectionIndex !== 0) {
        ScrollTrigger.getAll().forEach(trigger => {
          if (trigger.trigger === wrapper) {
            trigger.kill();
          }
        });
      }
      
      if (elementTimelineRef.current) {
        elementTimelineRef.current.kill();
        elementTimelineRef.current = null;
      }
    };
  }, [direction, sectionIndex]);

  return { wrapperRef };
};

function initCardDeckScroll(
  section: HTMLElement,
  items: HTMLElement[],
): gsap.core.Timeline {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—Å–µ–π –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç
  // Hero (index 0) —Å—Ç–∞—Ç–∏—á–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–Ω–∏–∑—É (yPercent: 100)
  // –ü–æ—Å–ª–µ SkillsSection (index 2) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ horizontal
  items.forEach((item, index) => {
    if (index === 0) {
      // Hero —Å—Ç–∞—Ç–∏—á–Ω–∞ –∏ –≤–∏–¥–∏–º–∞
      gsap.set(item, { yPercent: 0, xPercent: 0, visibility: 'visible' });
    } else if (index <= 2) {
      // About, Skills - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Å–∫—Ä—ã—Ç—ã –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      gsap.set(item, { yPercent: 100, xPercent: 0, visibility: 'hidden' });
    } else {
      // Projects, Gallery - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç—ã
      gsap.set(item, { yPercent: 0, xPercent: 100, visibility: 'hidden' });
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ timeline —Å ScrollTrigger –¥–ª—è –≤—Å–µ–π –∫–æ–ª–æ–¥—ã
  const timeline = gsap.timeline({
    scrollTrigger: {
      trigger: section,
      pin: true,
      start: 'top top',
      end: () => `+=${(items.length - 1) * 100}%`, // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ Hero —Å—Ç–∞—Ç–∏—á–Ω–∞
      scrub: 1,
      invalidateOnRefresh: true,
      scroller: '#smooth-wrapper',
      markers: true,
    },
    defaults: { ease: 'none' },
  });

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥–µ
  items.forEach((item, index) => {
    if (index === 0) return; // Hero —Å—Ç–∞—Ç–∏—á–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if (index > 0) {
      timeline.to(items[index - 1], {
        scale: 0.9,
        borderRadius: '10px',
      });
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    const property = index <= 2 ? 'yPercent' : 'xPercent'; // –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ SkillsSection
    timeline.to(
      item,
      {
        [property]: 0,
        visibility: 'visible', // –î–µ–ª–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤–∏–¥–∏–º–æ–π –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      },
      '<',
    );
  });
  
  return timeline;
}
