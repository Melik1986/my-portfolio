'use client';

import { gsap } from 'gsap';
import { SplitText } from 'gsap/SplitText';
import { AnimationType } from '@/lib/gsap/types/gsap.types';
import { parseAnimationData } from '@/lib/gsap/utils/parseAnimationData';
import { getAnimationDefinition, AnimationDefinition } from '@/lib/gsap/config/animation.config';

gsap.registerPlugin(SplitText);

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
type ElementAnimationParams = {
  duration: number;
  ease: string;
  delay: number;
};

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 */
type ElementAnimationConfig = {
  element: Element;
  params: ElementAnimationParams;
  animationDef?: AnimationDefinition;
};

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ timeline
 */
type AddAnimationConfig = {
  element: Element;
  animationType: AnimationType;
  params: ElementAnimationParams;
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è timeline —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
 * –°–æ–∑–¥–∞–µ—Ç timeline –±–µ–∑ ScrollTrigger –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–≤–Ω–µ
 */
export function createElementTimeline(
  container: HTMLElement,
  selector = '[data-animate], [data-animation]',
): gsap.core.Timeline {
  console.log('üé¨ Creating element timeline for container:', {
    container: container.id || container.className,
    containerRect: container.getBoundingClientRect(),
  });

  const elements = Array.from(container.querySelectorAll(selector));

  console.log('üîç Found elements with data-animation:', {
    count: elements.length,
    elements: elements.map((el) => ({
      tagName: el.tagName,
      className: el.className,
      id: el.id,
      animation: el.getAttribute('data-animation'),
      rect: el.getBoundingClientRect(),
    })),
  });

  if (elements.length === 0) {
    return gsap.timeline({ paused: true });
  }

  const tl = gsap.timeline({ paused: true });

  elements.forEach((element, index) => {
    console.log(`üéØ Processing element ${index + 1}/${elements.length}:`, {
      element: element.tagName,
      className: element.className,
      animation: element.getAttribute('data-animation'),
    });

    const config = parseAnimationData(element);
    if (!config) return;

    const params = {
      duration: config.duration ?? 1,
      delay: config.delay ?? 0,
      ease: config.ease ?? 'power1.out',
    };

    addAnimationToTimeline(tl, { element, animationType: config.animation, params });
  });

  console.log('‚úÖ Timeline created:', {
    duration: tl.duration(),
    paused: tl.paused(),
    progress: tl.progress(),
    totalAnimations: elements.length,
  });

  return tl;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ timeline –ø–æ —Ç–∏–ø—É –∞–Ω–∏–º–∞—Ü–∏–∏
 * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
 */
function addAnimationToTimeline(timeline: gsap.core.Timeline, config: AddAnimationConfig) {
  const { element, animationType, params } = config;

  console.log('üé≠ Adding animation to timeline:', {
    element: element.tagName,
    className: element.className,
    animationType,
    delay: params.delay,
    duration: params.duration,
    ease: params.ease,
  });

  const animationDef = getAnimationDefinition(animationType, params);

  if (!animationDef) {
    console.warn(`‚ùå Animation type "${animationType}" not found in definitions`);
    return;
  }

  console.log('üìã Animation config found:', {
    animationType,
    config: animationDef,
    fromState: animationDef.from,
    toState: animationDef.to,
  });

  // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ä–∞–Ω–µ–µ - fromTo() —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  console.log('üéØ Animation will be applied on timeline play:', {
    element: element.tagName,
    fromState: animationDef.from,
  });

  if (animationType === 'svg-draw') {
    addSvgDrawAnimation(timeline, { element, params });
    return;
  }
  if (animationType === 'text-reveal') {
    addTextRevealAnimation(timeline, { element, params });
    return;
  }

  console.log('‚ûï Adding base animation to timeline:', {
    element: element.tagName,
    timelineDurationBefore: timeline.duration(),
  });

  addBaseAnimation(timeline, { element, params, animationDef });

  console.log('‚úÖ Animation added to timeline:', {
    element: element.tagName,
    timelineDurationAfter: timeline.duration(),
    timelineProgress: timeline.progress(),
  });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∏—Å–æ–≤–∞–Ω–∏—è SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –ê–Ω–∏–º–∏—Ä—É–µ—Ç stroke-dashoffset –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
 * –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
 */
function addSvgDrawAnimation(timeline: gsap.core.Timeline, config: ElementAnimationConfig) {
  const { element, params } = config;
  const pathElements = element.querySelectorAll('path');
  pathElements.forEach((pathElement: Element) => {
    const pathLength = (pathElement as SVGPathElement).getTotalLength();
    timeline.set(pathElement, { strokeDasharray: pathLength, strokeDashoffset: pathLength }, 0);
    timeline.to(
      pathElement,
      {
        strokeDashoffset: 0,
        duration: params.duration,
        ease: params.ease,
        onComplete: () => {
          console.log('‚úÖ SVG draw animation completed for element:', element);
        },
      },
      params.delay,
    );
  });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—Å—Ç–∞
 * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å–∏–º–≤–æ–ª—ã –∏ –∞–Ω–∏–º–∏—Ä—É–µ—Ç –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏–µ
 * –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
 */
function addTextRevealAnimation(timeline: gsap.core.Timeline, config: ElementAnimationConfig) {
  const { element, params } = config;
  const split = new SplitText(element, { type: 'words,chars' });
  timeline.from(
    split.chars,
    {
      duration: params.duration,
      ease: params.ease,
      y: 50,
      opacity: 0,
      stagger: 0.05,
      onComplete: () => {
        console.log('‚úÖ Text reveal animation completed for element:', element);
      },
    },
    params.delay,
  );
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é from/to —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 * –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É—á–µ—Ç–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
 */
function addBaseAnimation(timeline: gsap.core.Timeline, config: ElementAnimationConfig) {
  const { element, params, animationDef } = config;
  if (!animationDef) return;

  const animationProps = {
    ...animationDef.to,
    duration: animationDef.duration,
    ease: animationDef.ease,
  };

  console.log('üé¨ Adding base animation:', {
    element: element.tagName,
    className: element.className,
    animationProps,
    delay: params.delay,
    timelineDurationBefore: timeline.duration(),
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–æ–∑–∏—Ü–∏–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–µ
  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è–º –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–º–∏ –≤—Ä–µ–º–µ–Ω–∞–º–∏
  timeline.fromTo(
    element,
    animationDef.from,
    {
      ...animationProps,
    },
    params.delay,
  );

  console.log('‚úÖ Base animation added:', {
    element: element.tagName,
    timelineDurationAfter: timeline.duration(),
    timelineChildren: timeline.getChildren().length,
  });
}
