'use client';

import { gsap } from 'gsap';
import { SplitText as GsapSplitText } from 'gsap/SplitText';
import type {
  AnimationType,
  GlobalSplitTextStorage,
  SplitText as SplitTextInstance,
} from '../types/gsap.types';
import { parseAnimationData } from '@/lib/gsap/utils/parseAnimationData';
import { getAnimationDefinition, AnimationDefinition } from '@/lib/gsap/config/animation.config';
import { gsapInitializer, isGSAPReady, isGSAPFallback } from '../core/GSAPInitializer';

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ GSAPInitializer

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
type ElementAnimationParams = {
  duration: number;
  ease: string;
  delay: number;
  stagger?: number;
  groupDelay?: number;
  sectionId?: string;
};

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 */
type ElementAnimationConfig = {
  element: Element;
  params: ElementAnimationParams;
  animationDef?: AnimationDefinition;
};

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ timeline
 */
type AddAnimationConfig = {
  element: Element;
  animationType: AnimationType;
  params: ElementAnimationParams;
};

/**
 * –û—á–∏—â–∞–µ—Ç SplitText —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 * –î–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export function cleanupSplitTextInstances(container: HTMLElement): void {
  const globalStorage = globalThis as GlobalSplitTextStorage;
  if (!globalStorage.__splitTextInstances) return;

  const instances = globalStorage.__splitTextInstances;
  const textElements = container.querySelectorAll('[data-animation="text-reveal"]');
  textElements.forEach((element) => {
    const splitTextInstance = instances.get(element);
    if (splitTextInstance) {
      splitTextInstance.revert();
      instances.delete(element);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –æ—Ç GSAP
      gsap.set(element, { clearProps: 'all' });
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
const parseElements = (elements: Element[], container: HTMLElement) => {
  return elements
    .map((element) => {
      const config = parseAnimationData(element);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π container –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ sectionId
      // –≠—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º data-section-index
      const sectionId =
        container.getAttribute('data-section') ||
        container.getAttribute('data-section-index') ||
        container.id ||
        'default';
      return {
        element,
        config,
        delay: config?.delay ?? 0,
        groupDelay: config?.groupDelay ?? 0,
        stagger: config?.stagger ?? 0,
        sectionId,
      };
    })
    .filter((item) => item.config);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º
const groupBySections = (parsedElements: ReturnType<typeof parseElements>) => {
  const sections = new Map<string, typeof parsedElements>();
  parsedElements.forEach((item) => {
    if (!sections.has(item.sectionId)) {
      sections.set(item.sectionId, []);
    }
    sections.get(item.sectionId)!.push(item);
  });
  return sections;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–π
const sortSections = (sections: Map<string, ReturnType<typeof parseElements>>) => {
  return Array.from(sections.entries()).sort(([, a], [, b]) => {
    const minGroupDelayA = Math.min(...a.map((item) => item.groupDelay));
    const minGroupDelayB = Math.min(...b.map((item) => item.groupDelay));
    return minGroupDelayA - minGroupDelayB;
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏
const processSection = (
  timeline: gsap.core.Timeline,
  sectionElements: ReturnType<typeof parseElements>,
  sectionStartTime: number,
) => {
  // –í –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ groupDelay
  const groups = new Map<number, typeof sectionElements>();
  sectionElements.forEach((item) => {
    if (!groups.has(item.groupDelay)) {
      groups.set(item.groupDelay, []);
    }
    groups.get(item.groupDelay)!.push(item);
  });

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ groupDelay
  const sortedGroups = Array.from(groups.entries()).sort(([a], [b]) => a - b);

  sortedGroups.forEach(([groupDelay, groupElements]) => {
    const groupStartTime = sectionStartTime + groupDelay;

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥—Ä—É–ø–ø–µ –ø–æ delay
    const sortedGroupElements = groupElements.sort((a, b) => a.delay - b.delay);

    sortedGroupElements.forEach((item, index) => {
      const params = {
        duration: item.config!.duration ?? 1,
        delay: item.delay,
        ease: item.config!.ease ?? 'power1.out',
        stagger: item.stagger,
        groupDelay: item.groupDelay,
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ timeline —Å —É—á–µ—Ç–æ–º stagger
      const staggerDelay = item.stagger > 0 ? index * item.stagger : 0;
      const elementPosition = groupStartTime + item.delay + staggerDelay;

      addAnimationToTimeline(
        timeline,
        {
          element: item.element,
          animationType: item.config!.animation,
          params,
        },
        elementPosition,
      );
    });
  });

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
  const maxGroupDelay = Math.max(...sectionElements.map((item) => item.groupDelay));
  const maxElementTime = Math.max(
    ...sectionElements.map((item) => item.delay + (item.config?.duration ?? 1)),
  );
  return maxGroupDelay + maxElementTime;
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è timeline —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
 * –°–æ–∑–¥–∞–µ—Ç timeline –±–µ–∑ ScrollTrigger –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–≤–Ω–µ
 */
export async function createElementTimeline(
  container: HTMLElement,
  selector = '[data-animation]',
): Promise<gsap.core.Timeline | null> {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GSAP —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const initResult = await gsapInitializer.initialize({
      timeout: 15000, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
      retryAttempts: 3,
      enableFallback: true
    });

    // –ï—Å–ª–∏ GSAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if (initResult.fallbackActive || !initResult.gsapAvailable) {
      console.warn('üîÑ GSAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CSS fallback –∞–Ω–∏–º–∞—Ü–∏–∏');
      activateFallbackAnimations(container, selector);
      return null;
    }

    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–π
    const elements = Array.from(container.querySelectorAll(selector));

    if (elements.length === 0) {
      return gsap.timeline({ paused: true });
    }

    const tl = gsap.timeline({ paused: true });

    // –ü–∞—Ä—Å–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–∫—Ü–∏—è–º
    const parsedElements = parseElements(elements, container);
    const sections = groupBySections(parsedElements);
    const sortedSections = sortSections(sections);

    let sectionStartTime = 0;

    sortedSections.forEach(([, sectionElements]) => {
      const sectionDuration = processSection(tl, sectionElements, sectionStartTime);
      sectionStartTime += sectionDuration;
    });

    return tl;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è timeline, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
    activateFallbackAnimations(container, selector);
    return null;
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ timeline –ø–æ —Ç–∏–ø—É –∞–Ω–∏–º–∞—Ü–∏–∏
 * –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
 */
function addAnimationToTimeline(
  timeline: gsap.core.Timeline,
  config: AddAnimationConfig,
  position?: number | string,
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å GSAP
  if (!isGSAPReady() || isGSAPFallback()) {
    console.warn('GSAP –Ω–µ –≥–æ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞');
    return;
  }

  try {
    const { element, animationType, params } = config;

    const animationDef = getAnimationDefinition(animationType, params);

    if (!animationDef) {
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
    const timelinePosition =
      position !== undefined ? position : params.delay === 0 ? '0' : `${params.delay}`;

    if (animationType === 'svg-draw') {
      addSvgDrawAnimation(timeline, { element, params }, timelinePosition);
      return;
    }
    if (animationType === 'text-reveal') {
      addTextRevealAnimation(timeline, { element, params, animationDef }, timelinePosition);
      return;
    }

    addBaseAnimation(timeline, { element, params, animationDef }, timelinePosition);
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ timeline:', error);
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç SplitText —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
 */
function getSplitTextInstance(element: HTMLElement): SplitTextInstance | null {
  const storage = ((globalThis as unknown as GlobalSplitTextStorage).__splitTextInstances ??=
    new WeakMap<Element, SplitTextInstance>());
  let splitText = storage.get(element);
  if (!splitText) {
    const gsapSplitText = new GsapSplitText(element, {
      type: 'lines',
      linesClass: 'line',
    });
    splitText = gsapSplitText as SplitTextInstance;
    storage.set(element, splitText);
  }
  return splitText;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ text-reveal
 */
function createLineInners(lines: Element[]): HTMLElement[] {
  return lines.map((line) => {
    const inner = document.createElement('div');
    inner.style.display = 'block';
    inner.innerHTML = line.innerHTML;
    line.innerHTML = '';
    line.appendChild(inner);
    return inner;
  });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Ä–∏—Å–æ–≤–∞–Ω–∏—è SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –ê–Ω–∏–º–∏—Ä—É–µ—Ç stroke-dashoffset –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
 */
function addSvgDrawAnimation(
  timeline: gsap.core.Timeline,
  config: ElementAnimationConfig,
  positionOverride?: number | string,
) {
  const { element, params } = config;
  const pathElements = element.querySelectorAll('path');

  // –ï—Å–ª–∏ delay —Ä–∞–≤–µ–Ω 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º "0" –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
  const position =
    positionOverride !== undefined
      ? positionOverride
      : params.delay === 0
        ? '0'
        : `${params.delay}`;

  pathElements.forEach((pathElement: Element) => {
    const pathLength = (pathElement as SVGPathElement).getTotalLength();
    timeline.set(pathElement, {
      strokeDasharray: pathLength,
      strokeDashoffset: pathLength,
    });

    timeline.to(
      pathElement,
      {
        strokeDashoffset: 0,
        duration: params.duration,
        ease: params.ease,
      },
      position,
    );
  });
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é reveal –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SplitText.create() –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å gsap.context
 */
function addTextRevealAnimation(
  timeline: gsap.core.Timeline,
  config: ElementAnimationConfig,
  positionOverride?: number | string,
) {
  const { element, params, animationDef } = config;
  if (!element || !element.textContent?.trim() || !animationDef) return;

  const splitText = getSplitTextInstance(element as HTMLElement);
  if (!splitText?.lines?.length) return;

  // –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π set –≤–Ω–µ —Ç–∞–π–º–ª–∞–π–Ω–∞, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ clearProps
  // gsap.set(element, { opacity: 1, visibility: 'visible' });

  const position = positionOverride ?? (params.delay === 0 ? '0' : `${params.delay}`);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º overflow: hidden –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
  gsap.set(splitText.lines, { overflow: 'hidden' });

  const lineInners = createLineInners(splitText.lines);

  // 0. –î–µ–ª–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–∏–º—ã–º –∏–º–µ–Ω–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö —Ç–∞–π–º–ª–∞–π–Ω–∞
  timeline.set(
    element,
    {
      opacity: 1,
      visibility: 'visible',
    },
    position,
  );

  // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–∫—Ä—ã—Ç–æ–µ)
  timeline.set(
    lineInners,
    {
      yPercent: 100,
      opacity: 1,
    },
    position,
  );

  // 2. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
  timeline.to(
    lineInners,
    {
      yPercent: 0,
      duration: animationDef.duration || 0.8,
      stagger: params.stagger ?? 0.1,
      ease: animationDef.ease || 'expo.out',
      onReverseComplete: () => {
        // –ü—Ä–∏ —Ä–µ–≤–µ—Ä—Å–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        gsap.set(lineInners, {
          yPercent: 100,
          opacity: 1,
        });
      },
    },
    position,
  );
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é from/to —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
function addBaseAnimation(
  timeline: gsap.core.Timeline,
  config: ElementAnimationConfig,
  positionOverride?: number | string,
) {
  try {
    const { element, params, animationDef } = config;
    if (!animationDef) return;

    const position =
      positionOverride !== undefined
        ? positionOverride
        : params.delay === 0
          ? '0'
          : `${params.delay}`;

    timeline.fromTo(
      element,
      {
        ...animationDef.from,
        autoAlpha: 0,
      },
      {
        ...animationDef.to,
        autoAlpha: 1,
        duration: animationDef.duration,
        ease: animationDef.ease,
      },
      position,
    );
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏:', error);
    // Fallback –∫ CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    activateFallbackForElement(config.element);
  }
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç fallback CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 */
function activateFallbackAnimations(container: HTMLElement, selector: string): void {
  const elements = Array.from(container.querySelectorAll(selector));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å fallback —Ä–µ–∂–∏–º–∞
  document.documentElement.classList.add('gsap-fallback');
  
  elements.forEach((element, index) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ stagger —ç—Ñ—Ñ–µ–∫—Ç–∞
    setTimeout(() => {
      activateFallbackForElement(element);
    }, index * 100);
  });
}

/**
 * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç fallback –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
 */
function activateFallbackForElement(element: Element): void {
  // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å animated –µ—Å–ª–∏ –µ—Å—Ç—å
  element.classList.remove('animated');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å animated –¥–ª—è –∑–∞–ø—É—Å–∫–∞ CSS –∞–Ω–∏–º–∞—Ü–∏–∏
  requestAnimationFrame(() => {
    element.classList.add('animated');
  });
}
