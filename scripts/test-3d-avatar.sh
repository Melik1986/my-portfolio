#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ 3D Avatar
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/test-3d-avatar.sh [unit|integration|e2e|all]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
print_header() {
    echo -e "\n${YELLOW}=== $1 ===${NC}\n"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
check_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úì $2 –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ${NC}"
    else
        echo -e "${RED}‚úó $2 –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å${NC}"
        exit 1
    fi
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
TEST_TYPE=${1:-all}

# –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤
run_unit_tests() {
    print_header "Unit —Ç–µ—Å—Ç—ã –¥–ª—è 3D Avatar"
    
    echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ useAvatar —Ö—É–∫–∞..."
    npm test -- src/modules/AboutSection/hooks/__tests__/useAvatar.test.ts
    check_result $? "Unit —Ç–µ—Å—Ç—ã useAvatar"
    
    echo -e "\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    npm test -- src/modules/AboutSection/config/__tests__/avatar3d.config.test.ts
    check_result $? "Unit —Ç–µ—Å—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
}

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_integration_tests() {
    print_header "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è 3D Avatar"
    
    echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 3DAvatar..."
    npm test -- src/modules/AboutSection/components/3DAvatar/__tests__/3DAvatar.test.tsx
    check_result $? "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
}

# –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤
run_e2e_tests() {
    print_header "E2E —Ç–µ—Å—Ç—ã –¥–ª—è 3D Avatar"
    
    echo "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞..."
    npx playwright test tests/e2e/avatar-3d-render.spec.ts
    check_result $? "E2E —Ç–µ—Å—Ç—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞"
    
    echo -e "\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    npx playwright test tests/e2e/avatar-performance.spec.ts
    check_result $? "E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    
    echo -e "\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫..."
    npx playwright test tests/e2e/avatar-error-handling.spec.ts
    check_result $? "E2E —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
generate_coverage_report() {
    print_header "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
    
    npm test -- --coverage \
        --collectCoverageFrom="src/modules/AboutSection/**/*.{ts,tsx}" \
        --coveragePathIgnorePatterns="<rootDir>/src/modules/AboutSection/**/*.test.{ts,tsx}" \
        src/modules/AboutSection/
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
echo -e "${GREEN}üß™ 3D Avatar Test Suite${NC}"
echo "=========================="

case $TEST_TYPE in
    unit)
        run_unit_tests
        ;;
    integration)
        run_integration_tests
        ;;
    e2e)
        run_e2e_tests
        ;;
    coverage)
        generate_coverage_report
        ;;
    all)
        run_unit_tests
        run_integration_tests
        run_e2e_tests
        generate_coverage_report
        ;;
    *)
        echo -e "${RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: $TEST_TYPE${NC}"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [unit|integration|e2e|coverage|all]"
        exit 1
        ;;
esac

echo -e "\n${GREEN}‚úì –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!${NC}"